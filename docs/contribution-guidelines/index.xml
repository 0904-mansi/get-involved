<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Contribute Code &amp; Content</title>
    <link>https://docker.github.io/get-involved/docs/contribution-guidelines/</link>
    <description>Recent content in Contribute Code &amp; Content on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docker.github.io/get-involved/docs/contribution-guidelines/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: How to contribute code to Docker</title>
      <link>https://docker.github.io/get-involved/docs/contribution-guidelines/contributecode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.github.io/get-involved/docs/contribution-guidelines/contributecode/</guid>
      <description>
        
        
        &lt;h1 id=&#34;contributing-to-docker&#34;&gt;Contributing to Docker&lt;/h1&gt;
&lt;p&gt;Want to hack on Docker? Awesome!  We have a contributor&amp;rsquo;s guide that explains
&lt;a href=&#34;https://docs.docker.com/opensource/project/who-written-for/&#34;&gt;setting up a Docker development environment and the contribution
process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This page contains information about reporting issues as well as some tips and
guidelines useful to experienced open source contributors. Finally, make sure
you read our &lt;a href=&#34;#docker-community-guidelines&#34;&gt;community guidelines&lt;/a&gt; before you
start participating.&lt;/p&gt;
&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#reporting-security-issues&#34;&gt;Reporting Security Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#design-and-cleanup-proposals&#34;&gt;Design and Cleanup Proposals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reporting-other-issues&#34;&gt;Reporting Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quick-contribution-tips-and-guidelines&#34;&gt;Quick Contribution Tips and Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-community-guidelines&#34;&gt;Community Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reporting-security-issues&#34;&gt;Reporting security issues&lt;/h2&gt;
&lt;p&gt;The Docker maintainers take security seriously. If you discover a security
issue, please bring it to their attention right away!&lt;/p&gt;
&lt;p&gt;Please &lt;strong&gt;DO NOT&lt;/strong&gt; file a public issue, instead send your report privately to
&lt;a href=&#34;mailto:security@docker.com&#34;&gt;security@docker.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Security reports are greatly appreciated and we will publicly thank you for it.
We also like to send gifts—if you&amp;rsquo;re into Docker swag, make sure to let
us know. We currently do not offer a paid security bounty program, but are not
ruling it out in the future.&lt;/p&gt;
&lt;h2 id=&#34;reporting-other-issues&#34;&gt;Reporting other issues&lt;/h2&gt;
&lt;p&gt;A great way to contribute to the project is to send a detailed report when you
encounter an issue. We always appreciate a well-written, thorough bug report,
and will thank you for it!&lt;/p&gt;
&lt;p&gt;Check that &lt;a href=&#34;https://github.com/docker/compose-cli/issues&#34;&gt;our issue database&lt;/a&gt;
doesn&amp;rsquo;t already include that problem or suggestion before submitting an issue.
If you find a match, you can use the &amp;ldquo;subscribe&amp;rdquo; button to get notified on
updates. Do &lt;em&gt;not&lt;/em&gt; leave random &amp;ldquo;+1&amp;rdquo; or &amp;ldquo;I have this too&amp;rdquo; comments, as they
only clutter the discussion, and don&amp;rsquo;t help to resolve it. However, if you
have ways to reproduce the issue or have additional information that may help
resolving the issue, please leave a comment.&lt;/p&gt;
&lt;p&gt;When reporting issues, always include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The output of &lt;code&gt;docker version&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The output of &lt;code&gt;docker context show&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The output of &lt;code&gt;docker info&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also include the steps required to reproduce the problem if possible and
applicable. This information will help us review and fix your issue faster.
When sending lengthy log files, consider posting them as a gist
(&lt;a href=&#34;https://gist.github.com&#34;&gt;https://gist.github.com&lt;/a&gt;).
Don&amp;rsquo;t forget to remove sensitive data from your log files before posting (you
can replace those parts with &amp;ldquo;REDACTED&amp;rdquo;).&lt;/p&gt;
&lt;h2 id=&#34;quick-contribution-tips-and-guidelines&#34;&gt;Quick contribution tips and guidelines&lt;/h2&gt;
&lt;p&gt;This section gives the experienced contributor some tips and guidelines.&lt;/p&gt;
&lt;h3 id=&#34;pull-requests-are-always-welcome&#34;&gt;Pull requests are always welcome&lt;/h3&gt;
&lt;p&gt;Not sure if that typo is worth a pull request? Found a bug and know how to fix
it? Do it! We will appreciate it. Any significant change, like adding a backend,
should be documented as
&lt;a href=&#34;https://github.com/docker/compose-cli/issues&#34;&gt;a GitHub issue&lt;/a&gt;
before anybody starts working on it.&lt;/p&gt;
&lt;p&gt;We are always thrilled to receive pull requests. We do our best to process them
quickly. If your pull request is not accepted on the first try,
don&amp;rsquo;t get discouraged! Our contributor&amp;rsquo;s guide explains
&lt;a href=&#34;https://docs.docker.com/opensource/workflow/make-a-contribution/&#34;&gt;the review process we use for simple changes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;talking-to-other-docker-users-and-contributors&#34;&gt;Talking to other Docker users and contributors&lt;/h3&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;col width=&#34;45%&#34;&gt;
  &lt;col width=&#34;65%&#34;&gt;
  &lt;tr&gt;
    &lt;td&gt;Community Slack&lt;/td&gt;
    &lt;td&gt;
      The Docker Community has a dedicated Slack chat to discuss features and issues.  You can sign-up &lt;a href=&#34;https://community.docker.com/registrations/groups/4316&#34; target=&#34;_blank&#34;&gt;with this link&lt;/a&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Forums&lt;/td&gt;
    &lt;td&gt;
      A public forum for users to discuss questions and explore current design patterns and
      best practices about Docker and related projects in the Docker Ecosystem. To participate,
      just log in with your Docker Hub account on &lt;a href=&#34;https://forums.docker.com&#34; target=&#34;_blank&#34;&gt;https://forums.docker.com&lt;/a&gt;.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Twitter&lt;/td&gt;
    &lt;td&gt;
      You can follow &lt;a href=&#34;https://twitter.com/docker/&#34; target=&#34;_blank&#34;&gt;Docker&#39;s Twitter feed&lt;/a&gt;
      to get updates on our products. You can also tweet us questions or just
      share blogs or stories.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Stack Overflow&lt;/td&gt;
    &lt;td&gt;
      Stack Overflow has over 17000 Docker questions listed. We regularly
      monitor &lt;a href=&#34;https://stackoverflow.com/search?tab=newest&amp;q=docker&#34; target=&#34;_blank&#34;&gt;Docker questions&lt;/a&gt;
      and so do many other knowledgeable Docker users.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&#34;conventions&#34;&gt;Conventions&lt;/h3&gt;
&lt;p&gt;Fork the repository and make changes on your fork in a feature branch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it&amp;rsquo;s a bug fix branch, name it XXXX-something where XXXX is the number of
the issue.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s a feature branch, create an enhancement issue to announce
your intentions, and name it XXXX-something where XXXX is the number of the
issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Submit unit tests for your changes. Go has a great test framework built in; use
it! Take a look at existing tests for inspiration. &lt;a href=&#34;README.md&#34;&gt;Run the full test
suite&lt;/a&gt; on your branch before
submitting a pull request.&lt;/p&gt;
&lt;p&gt;Write clean code. Universally formatted code promotes ease of writing, reading,
and maintenance. Always run &lt;code&gt;gofmt -s -w file.go&lt;/code&gt; on each changed file before
committing your changes. Most editors have plug-ins that do this automatically.&lt;/p&gt;
&lt;p&gt;Pull request descriptions should be as clear as possible and include a reference
to all the issues that they address.&lt;/p&gt;
&lt;p&gt;Commit messages must start with a capitalized and short summary (max. 50 chars)
written in the imperative, followed by an optional, more detailed explanatory
text which is separated from the summary by an empty line.&lt;/p&gt;
&lt;p&gt;Code review comments may be added to your pull request. Discuss, then make the
suggested modifications and push additional commits to your feature branch. Post
a comment after pushing. New commits show up in the pull request automatically,
but the reviewers are notified only when you comment.&lt;/p&gt;
&lt;p&gt;Pull requests must be cleanly rebased on top of master without multiple branches
mixed into the PR.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git tip&lt;/strong&gt;: If your PR no longer merges cleanly, use &lt;code&gt;rebase master&lt;/code&gt; in your
feature branch to update your pull request rather than &lt;code&gt;merge master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before you make a pull request, squash your commits into logical units of work
using &lt;code&gt;git rebase -i&lt;/code&gt; and &lt;code&gt;git push -f&lt;/code&gt;. A logical unit of work is a consistent
set of patches that should be reviewed together: for example, upgrading the
version of a vendored dependency and taking advantage of its now available new
feature constitute two separate units of work. Implementing a new function and
calling it in another file constitute a single logical unit of work. The very
high majority of submissions should have a single commit, so if in doubt: squash
down to one.&lt;/p&gt;
&lt;p&gt;After every commit, make sure the test suite passes. Include documentation
changes in the same pull request so that a revert would remove all traces of
the feature or fix.&lt;/p&gt;
&lt;p&gt;Include an issue reference like &lt;code&gt;Closes #XXXX&lt;/code&gt; or &lt;code&gt;Fixes #XXXX&lt;/code&gt; in the pull
request description that close an issue. Including references automatically
closes the issue on a merge.&lt;/p&gt;
&lt;p&gt;Please do not add yourself to the &lt;code&gt;AUTHORS&lt;/code&gt; file, as it is regenerated regularly
from the Git history.&lt;/p&gt;
&lt;p&gt;Please see the &lt;a href=&#34;#coding-style&#34;&gt;Coding Style&lt;/a&gt; for further guidelines.&lt;/p&gt;
&lt;h3 id=&#34;merge-approval&#34;&gt;Merge approval&lt;/h3&gt;
&lt;p&gt;Docker maintainers use LGTM (Looks Good To Me) in comments on the code review to
indicate acceptance.&lt;/p&gt;
&lt;p&gt;A change requires at least 2 LGTMs from the maintainers of each
component affected.&lt;/p&gt;
&lt;p&gt;For more details, see the &lt;a href=&#34;MAINTAINERS&#34;&gt;MAINTAINERS&lt;/a&gt; page.&lt;/p&gt;
&lt;h3 id=&#34;sign-your-work&#34;&gt;Sign your work&lt;/h3&gt;
&lt;p&gt;The sign-off is a simple line at the end of the explanation for the patch. Your
signature certifies that you wrote the patch or otherwise have the right to pass
it on as an open-source patch. The rules are pretty simple: if you can certify
the below (from &lt;a href=&#34;http://developercertificate.org/&#34;&gt;developercertificate.org&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
660 York Street, Suite 102,
San Francisco, CA 94110 USA

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.

Developer&#39;s Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you just add a line to every git commit message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Signed-off-by: Joe Smith &amp;lt;joe.smith@email.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use your real name (sorry, no pseudonyms or anonymous contributions.)&lt;/p&gt;
&lt;p&gt;If you set your &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; git configs, you can sign your
commit automatically with &lt;code&gt;git commit -s&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-can-i-become-a-maintainer&#34;&gt;How can I become a maintainer?&lt;/h3&gt;
&lt;p&gt;The procedures for adding new maintainers are explained in the global
&lt;a href=&#34;https://github.com/docker/opensource/blob/master/MAINTAINERS&#34;&gt;MAINTAINERS&lt;/a&gt;
file in the
&lt;a href=&#34;https://github.com/docker/opensource/&#34;&gt;https://github.com/docker/opensource/&lt;/a&gt;
repository.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t forget: being a maintainer is a time investment. Make sure you
will have time to make yourself available. You don&amp;rsquo;t have to be a
maintainer to make a difference on the project!&lt;/p&gt;
&lt;h2 id=&#34;docker-community-guidelines&#34;&gt;Docker community guidelines&lt;/h2&gt;
&lt;p&gt;We want to keep the Docker community awesome, growing and collaborative. We need
your help to keep it that way. To help with this we&amp;rsquo;ve come up with some general
guidelines for the community as a whole:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Be nice: Be courteous, respectful and polite to fellow community members:
no regional, racial, gender, or other abuse will be tolerated. We like
nice people way better than mean ones!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encourage diversity and participation: Make everyone in our community feel
welcome, regardless of their background and the extent of their
contributions, and do everything possible to encourage participation in
our community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep it legal: Basically, don&amp;rsquo;t get us in trouble. Share only content that
you own, do not share private or sensitive information, and don&amp;rsquo;t break
the law.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stay on topic: Make sure that you are posting to the correct channel and
avoid off-topic discussions. Remember when you update an issue or respond
to an email you are potentially sending to a large number of people. Please
consider this before you update. Also remember that nobody likes spam.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t send email to the maintainers: There&amp;rsquo;s no need to send email to the
maintainers to ask them to investigate an issue or to take a look at a
pull request. Instead of sending an email, GitHub mentions should be
used to ping maintainers to review a pull request, a proposal or an
issue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;coding-style&#34;&gt;Coding Style&lt;/h2&gt;
&lt;p&gt;Unless explicitly stated, we follow all coding guidelines from the Go
community. While some of these standards may seem arbitrary, they somehow seem
to result in a solid, consistent codebase.&lt;/p&gt;
&lt;p&gt;It is possible that the code base does not currently comply with these
guidelines. We are not looking for a massive PR that fixes this, since that
goes against the spirit of the guidelines. All new contributions should make a
best effort to clean up and make the code base better than they left it.
Obviously, apply your best judgement. Remember, the goal here is to make the
code base easier for humans to navigate and understand. Always keep that in
mind when nudging others to comply.&lt;/p&gt;
&lt;p&gt;The rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All code should be formatted with &lt;code&gt;gofmt -s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;All code should pass the default levels of
&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;&lt;code&gt;golint&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All code should follow the guidelines covered in &lt;a href=&#34;http://golang.org/doc/effective_go.html&#34;&gt;Effective
Go&lt;/a&gt; and &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;Go Code Review
Comments&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Comment the code. Tell us the why, the history and the context.&lt;/li&gt;
&lt;li&gt;Document &lt;em&gt;all&lt;/em&gt; declarations and methods, even private ones. Declare
expectations, caveats and anything else that may be important. If a type
gets exported, having the comments already there will ensure it&amp;rsquo;s ready.&lt;/li&gt;
&lt;li&gt;Variable name length should be proportional to its context and no longer.
&lt;code&gt;noCommaALongVariableNameLikeThisIsNotMoreClearWhenASimpleCommentWouldDo&lt;/code&gt;.
In practice, short methods will have short variable names and globals will
have longer names.&lt;/li&gt;
&lt;li&gt;No underscores in package names. If you need a compound name, step back,
and re-examine why you need a compound name. If you still think you need a
compound name, lose the underscore.&lt;/li&gt;
&lt;li&gt;No utils or helpers packages. If a function is not general enough to
warrant its own package, it has not been written generally enough to be a
part of a util package. Just leave it unexported and well-documented.&lt;/li&gt;
&lt;li&gt;All tests should run with &lt;code&gt;go test&lt;/code&gt; and outside tooling should not be
required. No, we don&amp;rsquo;t need another unit testing framework. Assertion
packages are acceptable if they provide &lt;em&gt;real&lt;/em&gt; incremental value.&lt;/li&gt;
&lt;li&gt;Even though we call these &amp;ldquo;rules&amp;rdquo; above, they are actually just
guidelines. Since you&amp;rsquo;ve read all the rules, you now know that.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you are having trouble getting into the mood of idiomatic Go, we recommend
reading through &lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt;. The
&lt;a href=&#34;https://blog.golang.org&#34;&gt;Go Blog&lt;/a&gt; is also a great resource. Drinking the
kool-aid is a lot easier than going thirsty.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to contribute to Docker documentation</title>
      <link>https://docker.github.io/get-involved/docs/contribution-guidelines/docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.github.io/get-involved/docs/contribution-guidelines/docs/</guid>
      <description>
        
        
        &lt;p&gt;Thank you so much for your interest in contributing to &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt; tutorials. Docker has open source in its DNA, and has always worked closely with the community.&lt;/p&gt;
&lt;p&gt;Just a few quick things to be aware of before you get started.&lt;/p&gt;
&lt;p&gt;We welcome issues and pull requests for fixing a problem with an existing tutorial. We are not accepting new tutorials. If you want to contribute new tutorials, please consider contributing to &lt;a href=&#34;https://training.play-with-docker.com&#34;&gt;training.play-with-docker.com&lt;/a&gt; in this repository: &lt;a href=&#34;https://github.com/play-with-docker/play-with-docker.github.io&#34;&gt;https://github.com/play-with-docker/play-with-docker.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anything you contribute will be under an Apache license. Docker will choose which tutorials to accept and reject, and will be able to take any tutorials here and put them in Docker documentation. Likewise, anything posted here may be forked by anyone on GitHub.&lt;/p&gt;
&lt;p&gt;We will be following the lightweight version of the Docker contribution policies and procedures as explained in&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com&#34;&gt;Docker documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/moby/moby/blob/master/CONTRIBUTING.md&#34;&gt;Docker engine repo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This largely boils down to &lt;a href=&#34;https://github.com/moby/moby/blob/master/CONTRIBUTING.md#sign-your-work&#34;&gt;signing your PRs&lt;/a&gt;, following the Docker &lt;a href=&#34;https://www.docker.com/trademark-guidelines&#34;&gt;trademark guidelines&lt;/a&gt;, and following the community guidelines.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to contribute to Docker Blog</title>
      <link>https://docker.github.io/get-involved/docs/contribution-guidelines/blogcontent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.github.io/get-involved/docs/contribution-guidelines/blogcontent/</guid>
      <description>
        
        
        &lt;p&gt;Thank you for your interest in contributing to the Docker Blog. The Docker blog is the place to get the latest on Docker news, technical insights and best practices, community updates and more. It is used to reveal new and updated versions of Docker products, announce major company milestones, hear from our industry friends and partners and act as an educational source for our global community of developers. The Docker Blog has an estimated 340,000 page views per month representing 300,000 unique visitors.  The most popular content that we see is nearly always technical in nature and targeted at developers, often written by developers!&lt;/p&gt;
&lt;p&gt;Once published your content will reach our community of our developers, employees, media, analysts and lookie-loos. Your content should focus on subjects that matter to the Docker community and ecosystem.&lt;/p&gt;
&lt;p&gt;Docker reserves the right to edit and modify any content you submit. We will do our best to communicate any substantive changes, but in the interest of time and expediency, our editorial team will not contact you to correct grammatical mistakes, stylistic errors and/or other minor modifications.&lt;/p&gt;
&lt;p&gt;Here’s a list of general guidelines, policies and contacts.&lt;/p&gt;
&lt;h2 id=&#34;general-guidelines&#34;&gt;General Guidelines&lt;/h2&gt;
&lt;h3 id=&#34;length&#34;&gt;Length&lt;/h3&gt;
&lt;p&gt;Blog posts should aim to be 500-1000 words. But in reality, we don’t have a hard stop. Write just long enough to engage and enrich readers. No more. No less. If your topic needs to be covered in more detail then a multi-part blog series is the way to go (see example here).&lt;/p&gt;
&lt;h3 id=&#34;topics&#34;&gt;Topics&lt;/h3&gt;
&lt;p&gt;Topics we like to see covered include: Docker, containers, container security, product updates, software development trends, how-tos, tutorials, event announcements (including recaps of industry happenings), containers, cloud, cloud platforms (AWS, Google Cloud, Microsoft Azure, etc.), Kubernetes, engineering, product roadmap, community, developer tools, and open source. This list is not exhaustive so feel free to suggest another topic related to Docker.&lt;/p&gt;
&lt;h3 id=&#34;style-and-formatting&#34;&gt;Style and Formatting&lt;/h3&gt;
&lt;p&gt;We don’t have a detailed style guide we require you to follow. However, we do have a handful of basic formatting requests that will make your post easier to read. Write your post with Google Docs. See this template on how you should submit your draft. Include suggested headline, author, social media account and expected publish date. This is the easiest way for us to convert your content into a WordPress post (using our Google Docs and WordPress integrations). Stick to H2 and H3 sub header levels. This helps keep formatting clear and simple. Make all screenshots 1360 pixels wide. Embed all images into the document or provide a link to a ZIP folder.&lt;/p&gt;
&lt;h3 id=&#34;graphics-and-images&#34;&gt;Graphics and images&lt;/h3&gt;
&lt;p&gt;Good use of images will draw readers into your blog posts. Include them. A good rule of thumb is to include at least one graphic per page/post. Be sure to cite the source of your image.&lt;/p&gt;
&lt;h3 id=&#34;headshot&#34;&gt;Headshot&lt;/h3&gt;
&lt;p&gt;If this is your first time blogging on Docker, please submit a picture of yourself. Send it as a JPEG file. As a general rule, WordPress image sizes should be no bigger than 150kb except for large photos. Our platform only shows your name and photo. No bios or links will be included.&lt;/p&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;When writing code, use the Courier New font to let us know that your text must appear as code as we transfer your content to our blog platform.&lt;/p&gt;
&lt;h3 id=&#34;headlines&#34;&gt;Headlines&lt;/h3&gt;
&lt;p&gt;This is harder than you think. Make it catchy, compelling and clickable. Headlines should help people instantly understand why they should read your article just from the title. Stuck? Don’t worry, go ahead and submit your blog and our crack team of editors can help with headline selection.&lt;/p&gt;
&lt;h3 id=&#34;use-headers-and-sub-headers&#34;&gt;Use Headers and Sub headers&lt;/h3&gt;
&lt;p&gt;Headers and sub headers will break up long blog posts, help people scan your blog and convince them to read the post.&lt;/p&gt;
&lt;h3 id=&#34;use-lists&#34;&gt;Use Lists&lt;/h3&gt;
&lt;p&gt;When warranted, numbered lists or bullet-pointed lists help people scan blog posts quickly and find information they’re looking for fast.&lt;/p&gt;
&lt;h3 id=&#34;brevity&#34;&gt;Brevity&lt;/h3&gt;
&lt;p&gt;We aren’t re-writing Windows OS so write in short sentences, break up large blocks of text with bold headings, and bullet your major points.&lt;/p&gt;
&lt;h3 id=&#34;tags&#34;&gt;Tags.&lt;/h3&gt;
&lt;p&gt;Docker tags content. Please suggest keyword tags that should accompany your post.&lt;/p&gt;
&lt;h2 id=&#34;pesky-policies&#34;&gt;Pesky Policies&lt;/h2&gt;
&lt;h3 id=&#34;content-review-process&#34;&gt;Content review process&lt;/h3&gt;
&lt;p&gt;Quality content takes time to edit and prepare, so please allow at least a week for the Docker editorial team review. Note that your content is also being juggled along with Docker-sourced blog content and we are constantly shifting publishing dates of our content to have the maximum impact with our readers. The more lead time you give us on a publishing, the better we can meet your date to push your content.&lt;/p&gt;
&lt;h3 id=&#34;reposting-policy&#34;&gt;Reposting policy&lt;/h3&gt;
&lt;p&gt;We prefer our content to be original and first run. However, if we deem a piece compelling and important, we are happy to repost existing content with links back to original content. We ask that you wait one week before reposting any content submitted to Docker’s blog. When reposting, please cite and link to Docker as the original source.&lt;/p&gt;
&lt;h3 id=&#34;promotional-link-policy&#34;&gt;Promotional link policy&lt;/h3&gt;
&lt;p&gt;We are here to promote benefits to the Docker community. Please refrain from having any personal or affiliated promotional links in your posts. If the promotion is related to an event that needs to be promoted on the topic being discussed in your blog (webinar, event, talk, etc.), feel free to promote away. The point is to avoid self-promotion in the article. If you don’t know what we mean, click here.&lt;/p&gt;
&lt;h3 id=&#34;social-media&#34;&gt;Social media&lt;/h3&gt;
&lt;p&gt;All blog posts on Docker will get a social media promotion on at least one of our three main networks Twitter, Facebook and LinkedIn. Be sure to include your social media profile in your draft post if you’d like us to highlight your handle. Please feel free to amplify as you see fit. If you’d like us to also amplify your personal social media accounts based on the content you submitted please contact our editorial team and we’ll do our best to retweet, share or update any social media you push.&lt;/p&gt;
&lt;h2 id=&#34;examples-of-successful-content&#34;&gt;Examples of Successful Content&lt;/h2&gt;
&lt;p&gt;Here is a list of popular blog posts that performed well. All these blogs have elements of what we outlined above.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/blog/containerized-python-development-part-1/&#34;&gt;Containerized Python Development – Part 1&lt;/a&gt;
Note due to length, this post was broken up into three parts.
See &lt;a href=&#34;https://www.docker.com/blog/containerized-python-development-part-2/&#34;&gt;Part 2&lt;/a&gt; and &lt;a href=&#34;https://www.docker.com/blog/containerized-python-development-part-3/&#34;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/&#34;&gt;How To Use the Official NGINX Docker Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/blog/docker-desktop-wsl-2-best-practices/&#34;&gt;Docker Desktop: WSL 2 Best practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;contacts&#34;&gt;Contacts&lt;/h2&gt;
&lt;p&gt;General questions please contact the Editorial Team: &lt;a href=&#34;mailto:press@docker.com&#34;&gt;press@docker.com&lt;/a&gt;
Docker Captains or Docker Community Leaders should contact: &lt;a href=&#34;mailto:william.quiviger@docker.com&#34;&gt;william.quiviger@docker.com&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How to contribute to Get Involved Site</title>
      <link>https://docker.github.io/get-involved/docs/contribution-guidelines/getinvolved/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.github.io/get-involved/docs/contribution-guidelines/getinvolved/</guid>
      <description>
        
        
        &lt;p&gt;Community and participation are the backbone of Docker. Whether you&amp;rsquo;re technical or not, we welcome contributions from anyone around the world. This page is intended for people who want to contribute content sections of this website and who don&amp;rsquo;t use Git or GitHub often. This will help you get going with a GitHub repository, using either Git on CLI or the GitHub web user interface (UI).&lt;/p&gt;
&lt;h2 id=&#34;using-the-command-line&#34;&gt;Using the command line&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fork/Clone the docker-community-leaders/community repository:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to the docker-community-leaders/dockercommunity on GitHub.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click Fork to make your own copy of the repository. GitHub creates a copy at &lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&lt;your-github-username&gt;/community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open a terminal on your local machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone your forked repository, to copy the files down to your local machine. This example creates a directory called community and uses SSH cloning to download the files:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;mkdir community
cd community/
git clone git@github.com:&amp;lt;your-github-username&amp;gt;/dockercommunity.git
cd dockercommunity/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;add-the-upstream-repository-as-a-git-remote-repository&#34;&gt;Add the upstream repository as a Git remote repository:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git remote add upstream https://github.com/docker-community-leaders/dockercommunity.git
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;check-your-remotes&#34;&gt;Check your remotes:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git remote -vv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should have 2 remote repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;origin - points to your own fork of the repository on gitHub - that is, the one you cloned your local repository from.&lt;/li&gt;
&lt;li&gt;upstream - points to the actual repository on gitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Create a branch. In this example, replace documentupdates with any branch name you like. Choose a branch name that helps you recognize the updates you plan to make in that branch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b documentupdates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add and edit the files as you like. The doc pages are in the /community/content/docs/ directory.&lt;/p&gt;
&lt;p&gt;Run git status at any time, to check the status of your local files. Git tells you which files need adding or committing to your local repository.&lt;/p&gt;
&lt;p&gt;Commit your updated files to your local Git repository. Example commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -a -m &amp;quot;Fixed some doc errors.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add add-this-doc.md
git commit -a -m &amp;quot;Added a shiny new doc.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Push from your branch (for example, updates) to the relevant branch on your fork on GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout documentupdates
git push origin documentsupdates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you&amp;rsquo;re ready to start the review process, create a pull request (PR) in the branch on your fork on the GitHub UI, based on the above push. The PR is auto-sent to the upstream repository - that is, the one you forked from.&lt;/p&gt;
&lt;p&gt;If you need to change the files in your PR, continue changing them locally in the same branch, then push them again in the same way. GitHub automatically sends them through to the same PR on the upstream repository!&lt;/p&gt;
&lt;p&gt;Hint: If you&amp;rsquo;re authenticating to GitHub via SSH, use ssh-add to add your SSH key passphrase to the managing agent, so that you don&amp;rsquo;t have to keep authenticating to GitHub. You need to do this again after every reboot.&lt;/p&gt;
&lt;h2 id=&#34;using-the-github-web-ui&#34;&gt;Using the GitHub web UI&lt;/h2&gt;
&lt;p&gt;Note: The GitHub web UI is suitable for quick updates to a single file. If your update is more complex or you need to update more than one file within one pull request (PR), then the command line provides a better experience.&lt;/p&gt;
&lt;p&gt;Follow these steps to edit a page using the GitHub UI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sign in to GitHub if you haven&amp;rsquo;t yet done so.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to the page that you want to edit on the Docker Community Site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click Edit this page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If this is the first time you&amp;rsquo;re updating a file in the Community site repository, a screen opens asking you to fork the repository. A fork is a copy of the repository where you can make your updates before submitting them for review. You only have to fork the repository once:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click Fork this repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If GitHub asks you Where should we fork the site and offers your username as an option, click the link on your username.
Wait a few seconds while GitHub makes a copy of the repository at &lt;a href=&#34;https://github.com/yourusername/community&#34;&gt;https://github.com/yourusername/community&lt;/a&gt;. This copy is your fork of the docker-community-leaders/community repository.&lt;/p&gt;
&lt;p&gt;The GitHub editor interface opens for the selected page. Make your updates to the content.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click Preview changes at the top of the editing area to see the effect of your changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need to make more changes, click Edit file at the top of the preview area.&lt;/p&gt;
&lt;p&gt;When you are ready to submit your changes, scroll down to the Propose file change section at the bottom of the editing area.&lt;/p&gt;
&lt;p&gt;Enter a short description of your update. This short description becomes the title of your pull request (PR).&lt;/p&gt;
&lt;p&gt;In the second text box (for the extended description), enter a more detailed description.&lt;/p&gt;
&lt;p&gt;Click Propose file change. A new screen appears, offering you the opportunity to open a pull request.&lt;/p&gt;
&lt;p&gt;Click Create pull request.&lt;/p&gt;
&lt;p&gt;Optionally, edit the pull request title and description.&lt;/p&gt;
&lt;p&gt;Make sure Allow edits from maintainers remains checked.&lt;/p&gt;
&lt;p&gt;Click Create pull request again. You have now sent a request to the repository maintainers to review your change.&lt;/p&gt;
&lt;p&gt;Check the online preview of your changes:&lt;/p&gt;
&lt;p&gt;Wait for the automated PR workflow to do some checks. When it&amp;rsquo;s ready, you should see a comment like this: deploy/netlify — Deploy preview ready!
Click Details to the right of &amp;ldquo;Deploy preview ready&amp;rdquo; to see a preview of your updates.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
