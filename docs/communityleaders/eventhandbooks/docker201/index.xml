<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Docker for Intermediate</title>
    <link>/docs/communityleaders/eventhandbooks/docker201/</link>
    <description>Recent content in Docker for Intermediate on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/communityleaders/eventhandbooks/docker201/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Your Event Checklist</title>
      <link>/docs/communityleaders/eventhandbooks/docker201/checklists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/communityleaders/eventhandbooks/docker201/checklists/</guid>
      <description>
        
        
        &lt;h2 id=&#34;checklists&#34;&gt;Checklists&lt;/h2&gt;
&lt;h2 id=&#34;before-the-workshop&#34;&gt;Before the workshop&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;S.No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name of Objectives&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;#getting-familiar-with-bevy-virtual&#34;&gt;Getting Familiar with Bevy Virtual&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;#planning-an-event-agenda&#34;&gt;Planning an Event Agenda&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;#setting-up-event-registration-page&#34;&gt;Setting up Event Registration Page&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;#sending-confirmation-email-for-workshop&#34;&gt;Sending confirmation email for workshop&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;during-the-workshop&#34;&gt;During the workshop&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;S.No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name of Objectives&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;#conducting-attendee-survey&#34;&gt;Conducting Attendee Survey&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;after-the-workshop&#34;&gt;After the workshop&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;S.No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name of Objectives&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;#post-event-followup&#34;&gt;Post-Event FollowUp&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;#community-leader-survey&#34;&gt;Community Leader Survey&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;#attendee-survey&#34;&gt;Attendee Survey&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;getting-familiar-with-bevy-virtual&#34;&gt;Getting Familiar with Bevy Virtual&lt;/h2&gt;
&lt;p&gt;Docker community leaders uses Bevy (&lt;a href=&#34;https://events.docker.com&#34;&gt;https://events.docker.com&lt;/a&gt;) tool to conduct virtual Meetup events. Bevy is the tool that provides the MOST features to your Community, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2 way integration with Meetup.com (create your event in Bevy and it posts to your meetup page and RSVPs from your event on meetup sync with your Bevy events.docker.com page).
Note: The RSVP limits you set in Bevy do not translate to meetup. The best way to handle this is to keep a watchful eye on both platforms or communicate that seats are first come first serve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ability to check in guests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mobile App&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RSVP as Guest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forms / Surveys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic Emails (customizable)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s important for all community leaders to be familiar with this tool to conduct virtual events successfully.&lt;/p&gt;
&lt;h3 id=&#34;events---analytics&#34;&gt;Events |  Analytics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/344-create-a-new-event&#34;&gt;Create a new event&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/428-virtual-event-type&#34;&gt;Virtual Event Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/389-manage-chapter-members&#34;&gt;Manage chapter members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bevy-virtual&#34;&gt;Bevy Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/457-using-bevy-virtual&#34;&gt;Using Bevy Virtual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/496-test-event-in-bevy-virtual&#34;&gt;How to create a test event in Bevy Virtual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/470-record-in-bevy-virtual&#34;&gt;Record in Bevy Virtual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/492-screensharing-in-bevy-virtual&#34;&gt;Screensharing in Bevy Virtual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/495-breakout-rooms&#34;&gt;Breakout Rooms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.bevylabs.com/article/519-chat-features&#34;&gt;Chat, DM&amp;rsquo;s &amp;amp; Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;planning-an-event-agenda&#34;&gt;Planning an Event Agenda&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Your event must be posted on your &lt;a href=&#34;https://events.docker.com/chapters/&#34;&gt;city’s Chapter page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Try to create event 1 month before the event&lt;/li&gt;
&lt;li&gt;If you are unsure of how to use your chapter page &lt;a href=&#34;https://drive.google.com/file/d/1ld54sqzTTBMiygUzsjRD7B10XzWozbMl/view?usp=sharing&#34;&gt;please watch this video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you are having issues with your page, do not have a page or need admin permissions please contact William over Docker community Slack or send email to william.quiviger(AT)docker.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setting-up-event-registration-page&#34;&gt;Setting up Event Registration Page&lt;/h2&gt;
&lt;p&gt;Every Community leader is expected to set up event registration page. While building an event registration page, ensure that the below list of information are captured:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title of the workshop&lt;/li&gt;
&lt;li&gt;Date of the workshop&lt;/li&gt;
&lt;li&gt;Short Description of the workshop&lt;/li&gt;
&lt;li&gt;Format of the workshop(whether it will be LIVE or recorded)&lt;/li&gt;
&lt;li&gt;Level of the audience(Beginners/Intermediate/Advanced)&lt;/li&gt;
&lt;li&gt;Name of the speakers&lt;/li&gt;
&lt;li&gt;A Form which ask users to supply:
&lt;ul&gt;
&lt;li&gt;First Name&lt;/li&gt;
&lt;li&gt;Last Name&lt;/li&gt;
&lt;li&gt;Email Address&lt;/li&gt;
&lt;li&gt;Company Name&lt;/li&gt;
&lt;li&gt;Job Function&lt;/li&gt;
&lt;li&gt;Country&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sending-confirmation-email-for-workshop&#34;&gt;Sending confirmation email for workshop&lt;/h2&gt;
&lt;p&gt;Once the user register for the event, Community Leaders need to ensure that the interested users should receive a confirmation email.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Thank you message for registering for this event&lt;/li&gt;
&lt;li&gt;Ensure that the registered user should be able to add the events date to their calendar&lt;/li&gt;
&lt;li&gt;The email should carry workshop title and date of the workshop&lt;/li&gt;
&lt;li&gt;Gentle reminder as the date of workshop come closer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sample-confirmation-email-for-the-workshop&#34;&gt;Sample Confirmation email for the workshop&lt;/h3&gt;
&lt;h2 id=&#34;post-event-followup&#34;&gt;Post-Event Followup&lt;/h2&gt;
&lt;h3 id=&#34;1--send-a-thank-you-email&#34;&gt;#1  Send a Thank You email&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;S.No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name of Objectives&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;“Thank you for attending” post on the social media channels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;ldquo;Thank you&amp;rdquo; email to all those who registered and attended the event&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Share the pics you took during the event and share it on social media(LinkedIn, Twitter, Facebook Public Docker Group etc&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Send thanks email to sponsor/vendors if this workshop is part of the Meetup event.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Thank core team and volunteers who helped you with the workshop&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-post-event-review&#34;&gt;#2 Post-event Review&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;S.No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name of Objectives&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sit down with your team for a debrief session where you discuss how the event went&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Consider inviting at least some of the volunteers.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Evaluate whether the event was a success according to whatever goals you’ve set&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Have an open discussion about what worked well and what could be done better the next time around.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sit down with your team for a debrief session where you discuss how the event went&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3-ask-for-feedback&#34;&gt;#3 Ask for feedback&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;S.No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name of Objectives&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;While the event is still fresh in everyone’s mind, get their feedback about it.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Be straightforward. Collect input is to send out an email link to a survey that people can fill out online.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pick the one you like. If you can, add an incentive (free tickets to your next events, chance to win a gift card, and the like.).&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Having everyone fill out the same survey makes it easy to compare their input and spot trends and areas that need improvement.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4--follow-up-on-social-media&#34;&gt;#4  Follow up on social media&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;S.No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name of Objectives&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Online chatter about your event won’t immediately quiet down after the event is over.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Follow the conversation and jump in where it make sense to chip in with your input, thank the guests, or answer questions.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Engaging in post-event social media chatter and keeping the buzz going will also help you build audience for your next event.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Online chatter about your event won’t immediately quiet down after the event is over.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;5-start-planning-your-next-event&#34;&gt;#5 Start planning your next event&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;S.No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name of Objectives&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Start putting all of that to good use and begin jotting down ideas for your next fantastic event&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;☑️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Agenda</title>
      <link>/docs/communityleaders/eventhandbooks/docker201/agenda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/communityleaders/eventhandbooks/docker201/agenda/</guid>
      <description>
        
        
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Timing&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Welcome&lt;/td&gt;
&lt;td&gt;8:45 AM to 9:00 AM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;../gettingstarted&#34;&gt;Getting Started with Docker Compose &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;9:00 AM to 10:00 AM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;../wordpress/&#34;&gt;Create WordPress app using Docker Compose&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;10:00 AM to 11:00 AM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coffee/Tea Break&lt;/td&gt;
&lt;td&gt;11:00 AM to 11:15 AM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;../swarm/&#34;&gt;Getting Started with Docker Swarm - Part 1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11:15 AM to 12:45 PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lunch&lt;/td&gt;
&lt;td&gt;12:45 PM to 1:45 PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;../swarm/&#34;&gt;Getting Started with Docker Swarm - Part 2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1:45 PM to 3:30 PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;../swarm-wordpress/&#34;&gt;Building WordPress application using Docker Swarm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3:30 PM to 4:00 PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;../networking&#34;&gt;Introduction to Docker Networking - Part 1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4:00 PM to 4:30 PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coffee/Tea Break&lt;/td&gt;
&lt;td&gt;4:00 PM to 4:30 PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;../networking/&#34;&gt;Introduction to Docker Networking - Part 2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4:45 PM to 5:45 PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quiz/Prize/Certificate Distribution&lt;/td&gt;
&lt;td&gt;5:45 PM to 6:00 PM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Building Wordpress application using Docker Swarm</title>
      <link>/docs/communityleaders/eventhandbooks/docker201/swarm-wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/communityleaders/eventhandbooks/docker201/swarm-wordpress/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-dockerized-wordpress-application-in-5-node-docker-swarm-mode-cluster&#34;&gt;Running Dockerized WordPress Application in 5-Node Docker Swarm Mode Cluster&lt;/h1&gt;
&lt;h2 id=&#34;tested-infrastructure&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt; Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Click on &amp;ldquo;Template&amp;rdquo; sign near to Instance on the left side of the PWD window.&lt;/li&gt;
&lt;li&gt;Select 3 Managers and 2 worker nodes template from drop-down menu&lt;/li&gt;
&lt;li&gt;This will bring up 5-Node Docker Swarm Mode cluster for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-a-wordpress-docker-compose-file-for-docker-swarm&#34;&gt;Create a WordPress Docker Compose file for Docker Swarm&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;version: &#39;3.6&#39;

services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: wordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    deploy:
      placement:
          constraints: [node.role == worker]
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - &amp;quot;8000:80&amp;quot;
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_PASSWORD: wordpress
    deploy:
      placement:
          constraints: [node.role == worker]
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

volumes:
    db_data:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Save the file with a name &amp;ldquo;stack.yml&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;bring-up-wordpress-application-stack&#34;&gt;Bring up WordPress Application Stack&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;$ docker stack deploy -c stack.yml myapp4

Creating network myapp4_default
Creating service myapp4_db
Creating service myapp4_wordpress
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A Port 8000 will appear instantly. Wait for 20 seconds and then click it to open WordPress App.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Creating WordPress app using Docker Compose</title>
      <link>/docs/communityleaders/eventhandbooks/docker201/wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/communityleaders/eventhandbooks/docker201/wordpress/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-single-node-wordpress-example&#34;&gt;Running Single Node WordPress Example&lt;/h1&gt;
&lt;h2 id=&#34;pre-requisite&#34;&gt;Pre-requisite:&lt;/h2&gt;
&lt;h2 id=&#34;tested-infrastructure&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt; Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite-1&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Add New Instance&lt;/strong&gt; on the left side of the screen to bring up Alpine OS instance on the right side&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;steps&#34;&gt;Steps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Create a docker-compose.yml file&lt;/li&gt;
&lt;li&gt;Bringup the containers&lt;/li&gt;
&lt;li&gt;Stop the container of a single service&lt;/li&gt;
&lt;li&gt;Starting the stopped container&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-a-docker-composeyml-file&#34;&gt;Create a docker-compose.yml file&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;version: &#39;3&#39;
services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress
   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - &amp;quot;8000:80&amp;quot;
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
volumes:
    db_data:
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;bringup-the-containers&#34;&gt;Bringup the containers&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;checking-container-status&#34;&gt;Checking container status&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$  docker-compose ps
 Name               Command             State                    Ports                  
----------------------------------------------------------------------------------------
Mysqldb   docker-entrypoint.sh mysqld   Up      0.0.0.0:3306-&amp;gt;3306/tcp, 33060/tcp       
Nginx     nginx -g daemon off;          Up      0.0.0.0:443-&amp;gt;443/tcp, 0.0.0.0:80-&amp;gt;80/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;listout-the-services&#34;&gt;Listout the services&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$  docker-compose ps --services
webserver
dbserver
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;stop-the-container-of-a-single-service&#34;&gt;Stop the container of a single service&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$  docker-compose stop webserver
Stopping Nginx ... done
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;checking-container-status-1&#34;&gt;Checking container status&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$  docker-compose ps
 Name               Command             State                  Ports              
----------------------------------------------------------------------------------
Mysqldb   docker-entrypoint.sh mysqld   Up       0.0.0.0:3306-&amp;gt;3306/tcp, 33060/tcp
Nginx     nginx -g daemon off;          Exit 0                               
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;starting-the-stopped-container&#34;&gt;Starting the stopped container&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$  docker-compose start webserver
Starting webserver ... done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; You cant directly bringup/Start containers using &lt;code&gt;docker-compose start&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Getting Started with Docker Compose</title>
      <link>/docs/communityleaders/eventhandbooks/docker201/gettingstarted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/communityleaders/eventhandbooks/docker201/gettingstarted/</guid>
      <description>
        
        
        &lt;h1 id=&#34;docker-compose&#34;&gt;Docker compose&lt;/h1&gt;
&lt;p&gt;Docker compose is a tool built by docker to ease the task to creating and configring multiple containers in a development environment counter-part of docker-compose for prodcution environment is &lt;code&gt;docker swarm&lt;/code&gt;. Docker compose takes as input a &lt;code&gt;YAML&lt;/code&gt; configuration file and creates the resources (&lt;em&gt;containers&lt;/em&gt;, &lt;em&gt;networks&lt;/em&gt;, &lt;em&gt;volumes&lt;/em&gt; etc.) by communicating with the docker daemon through docker api.&lt;/p&gt;
&lt;h1 id=&#34;introduction-to-compose&#34;&gt;Introduction to Compose&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; project is the official open source project for Docker and is responsible for the rapid orchestration of Docker container clusters. Functionally, it is very similar to Heat OpenStack .&lt;/p&gt;
&lt;p&gt;The code is currently open sourced at &lt;a href=&#34;https://github.com/docker/compose&#34;&gt;https://github.com/docker/compose&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; positioned as &amp;ldquo;Defining and running multi-container Docker applications&amp;rdquo;, and its predecessor is the open source project Fig.&lt;/p&gt;
&lt;p&gt;Through the introduction in the first part, we know that using a Dockerfile template file allows users to easily define a separate application container. However, in daily work, it is often the case that multiple containers need to cooperate to complete a certain task. For example, to implement a Web project, in addition to the Web service container itself, it is often necessary to add a back-end database service container, and even a load balancing container.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; just meets this need. It allows the user to define a set of associated application containers as a project through a separate docker-compose.yml template file (YAML format).&lt;/p&gt;
&lt;p&gt;There are two important concepts in Compose :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Service:&lt;/code&gt; A container for an application that can actually include several container instances running the same image.&lt;/p&gt;
&lt;p&gt;Project: A complete business unit consisting of a set of associated application containers, defined in the &lt;code&gt;docker-compose.yml &lt;/code&gt;file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; &amp;lsquo;s default management object is a project that provides convenient lifecycle management of a set of containers in a project through subcommands.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; project is written in Python, and the implementation calls the API provided by the Docker service to manage the container. Therefore, as long as the platform being operated supports the Docker API, you can use Compose to manage it.&lt;/p&gt;
&lt;h2 id=&#34;compose-file-used-in-examples&#34;&gt;Compose file used in examples&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;.&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;web-client&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;depends_on&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- server&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;8080:8080&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;server&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;helloworld&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;volumes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/app&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Anonymous volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;data:/data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Named volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mydata:/data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# External volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;volumes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;mydata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;external&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Refer &lt;a href=&#34;https://docs.docker.com/compose/compose-file/&#34;&gt;this&lt;/a&gt; for configuring your compose file.&lt;/p&gt;
&lt;h2 id=&#34;cli-cheatsheet&#34;&gt;CLI Cheatsheet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker-compose&#34;&gt;Docker compose&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#compose-file-used-in-examples&#34;&gt;Compose file used in examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cli-cheatsheet&#34;&gt;CLI Cheatsheet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bundle&#34;&gt;Bundle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#up&#34;&gt;Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#down&#34;&gt;Down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scale&#34;&gt;Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#start&#34;&gt;Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stop&#34;&gt;Stop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;build&#34;&gt;Build&lt;/h3&gt;
&lt;p&gt;Used to build services specified in docker-compose.yml file with &lt;code&gt;build&lt;/code&gt; specification.&lt;/p&gt;
&lt;p&gt;Refer &lt;a href=&#34;https://docs.docker.com/compose/compose-file/#build&#34;&gt;this&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
Images build will be tagged as {DIR}_{SERVICE} unless image name is specified in the service specification.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose build [OPTIONS] [SERVICE...]

OPTIONS:

--compress | Command line flag to compress the build context, Build context is nothing but a directory where docker-compose.yml file is located. As this directory can container a lot of files, sending build context to the container can take a lot of time thus compression is needed.

--force-rm | Remove any intermediate container while building.

--no-cache | Build images without using any cached layers from previoud builds.

--pull | Allways pull newer version of the base image.

-m, --memory | Set memory limit for the container used for building the image.

--parallel | Exploit go routines to parallely build images, As docker daemon is written in go.

--build-arg key=val | Pass any varaible to the dockerfile from the command line.


SERVICE:

If you want to build any particular services instead of every service specified in the compose file pass the name (same as in the compose file) as arguments to the command.

Example:

docker-compose build --compress     # Will compress the build context of service web.

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;bundle&#34;&gt;Bundle&lt;/h3&gt;
&lt;p&gt;Used to generate distributed application bundle (DAB) from the compose file.&lt;/p&gt;
&lt;p&gt;Refer &lt;a href=&#34;https://docs.docker.com/compose/bundles/&#34;&gt;this&lt;/a&gt; for more details about DBA.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose bundle [OPTIONS]

OPTIONS:

--push-image | Push images to the register if any service has build specifcation.

-o, --output PATH | Output path for .dab file.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;config&#34;&gt;Config&lt;/h3&gt;
&lt;p&gt;Used to validate the compose file&lt;/p&gt;
&lt;p&gt;NOTE:
Run this command in direcotry where docker-compose.yml file is located.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose config
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;up&#34;&gt;Up&lt;/h3&gt;
&lt;p&gt;Creates and starts the resources as per the specification the docker-compose.yml file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up [OPTIONS] [SERVICE...]

OPTIONS:

-d, --detach | Run containers in background.

--build | Always build images even if it exists.

--no-deps | Avoid creating any linked services.

--force-recreate | Force recreating containers even if specification is not changed.

--no-recreate | Do not recreate containers.

--no-build | Do not build any image even if it is missing.

--no-start | Just create the containers without starting them.

--scale SERVICE=NUM | Create multiple containers for a service.

-V, --renew-anon-volumes | Recreate anonymous volumes instead of getting data from previous ones.

Example:

docker-compose up -d        # Will run service containers in background
docker-compose up web       # Will start service web and server because of &#39;depends_on&#39; field
docker-compose up server    # will start server service only.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;down&#34;&gt;Down&lt;/h3&gt;
&lt;p&gt;Stop and clear any resources created while lifting docker-compose.&lt;/p&gt;
&lt;p&gt;By default only containers and networks defined in the compose file are removed.
Networks and Volumes with external = true and never removed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose down [OPTIONS]

--rmi type | Remove images Type = all (Remove every image in the compose file), local (Remove images with no custom tag)

-v, --volumes | Remove named volumes except the external ones and also remove anonymous volumes

-t, --timeout TIMEOUT | Speficy shutdown time in seconds. (default = 10)

Example:

docker-compose down         # Will delete all containers of both web and server and no volume will be removed

docker-compose down -v      # Will also delete anonymous and data volumes.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;scale&#34;&gt;Scale&lt;/h3&gt;
&lt;p&gt;Scale particular services&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose scale [SERVICE=NUM...]

Example:

docker-compose scale server=3 web=2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;start&#34;&gt;Start&lt;/h3&gt;
&lt;p&gt;Start created containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose start [SERVICE...]

Example:

docker-compose start        # Start containers for every service.
docker-compose start web    # Start containers only for service web. 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;stop&#34;&gt;Stop&lt;/h3&gt;
&lt;p&gt;Stop running containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose stop [SERVICE...]

Example:

docker-compose stop         # Stop containers for every service.
docker-compose stop web     # Stop containers only for service web.
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Getting Started with Docker Swarm</title>
      <link>/docs/communityleaders/eventhandbooks/docker201/swarm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/communityleaders/eventhandbooks/docker201/swarm/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;Docker Swarm is a container orchestration tool built and managed by Docker, Inc.&lt;/li&gt;
&lt;li&gt;It is the native clustering tool for Docker.&lt;/li&gt;
&lt;li&gt;Swarm uses the standard Docker API, i.e., containers can be launched using normal docker run commands and Swarm will take care of selecting an appropriate host to run the container on.&lt;/li&gt;
&lt;li&gt;The tools that use the Docker API—such as Compose and bespoke scripts—can use Swarm without any changes and take advantage of running on a cluster rather than a single host.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/collabnix/dockerlabs/master/intermediate/swarm/swarm-orchestration.png&#34; alt=&#34;My image&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;but-why-do-we-need-container-orchestration-system&#34;&gt;But why do we need Container orchestration System?&lt;/h1&gt;
&lt;p&gt;Imagine that you had to run hundreds of containers. You can easily see that if they are running in a distributed mode, there are multiple features that you will need from a management angle to make sure that the cluster is up and running, is healthy and
more.&lt;/p&gt;
&lt;p&gt;Some of these necessary features include:&lt;/p&gt;
&lt;p&gt;● Health Checks on the Containers &lt;br&gt;
● Launching a fixed set of Containers for a particular Docker image&lt;br&gt;
● Scaling the number of Containers up and down depending on the load&lt;br&gt;
● Performing rolling update of software across containers&lt;br&gt;
● and more…&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Docker Swarm has capabilities to help us implement all those great features - all through simple CLIs.&lt;/p&gt;
&lt;h1 id=&#34;does-docker-swarm-require-3rd-party-tool-to-be-installed&#34;&gt;Does Docker Swarm require 3rd Party tool to be installed?&lt;/h1&gt;
&lt;p&gt;Docker Swarm Mode comes integrated with Docker Platform. Starting 1.12, Docker Swarm Mode is rightly integrated which means that you don&amp;rsquo;t need to install anything outside to run Docker Swarm. Just initialize it and you can get started.&lt;/p&gt;
&lt;h1 id=&#34;does-docker-swarm-work-with-docker-machine--docker-compose&#34;&gt;Does Docker Swarm work with Docker Machine &amp;amp; Docker Compose?&lt;/h1&gt;
&lt;p&gt;Yes, it works very well with the Docker command line tools like docker and docker-machine, and provides the basic ability to deploy a Docker container to a collection of machines running the Docker Engine. Docker Swarm does differ in scope, however, from what we saw when reviewing Amazon ECS.&lt;/p&gt;
&lt;h1 id=&#34;how-does-swarm-cluster-look-like&#34;&gt;How does Swarm Cluster look like?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/collabnix/dockerlabs/master/intermediate/swarm/swarm-arch.png&#34; alt=&#34;My image&#34;&gt;&lt;/p&gt;
&lt;p&gt;The basic architecture of Swarm is fairly straightforward: each host runs a Swarm agent and one host runs a Swarm manager (on small test clusters this host may also run an agent). The manager is responsible for the orchestration and scheduling of containers on the hosts. Swarm can be run in a high-availability mode where one of etcd, Consul or ZooKeeper is used to handle fail-over to a back-up manager. There are several different methods for how hosts are found and added to a cluster, which is known as discovery in Swarm. By default, token based discovery is used, where the addresses of hosts are kept in a list stored on the Docker Hub.&lt;/p&gt;
&lt;p&gt;A swarm is a group of machines that are running Docker and joined into a cluster. After that has happened, we continue to run the Docker commands we’re used to, but now they are executed on a cluster by a swarm manager. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as nodes.&lt;/p&gt;
&lt;p&gt;Swarm managers are the only machines in a swarm that can execute your commands, or authorize other machines to join the swarm as workers. Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do.&lt;/p&gt;
&lt;p&gt;Up until now, you have been using Docker in a single-host mode on your local machine. But Docker also can be switched into swarm mode, and that’s what enables the use of swarms. Enabling swarm mode instantly makes the current machine a swarm manager. From then on, Docker runs the commands you execute on the swarm you’re managing, rather than just on the current machine.&lt;/p&gt;
&lt;p&gt;Swarm managers can use several strategies to run containers, such as “emptiest node” &amp;ndash; which fills the least utilized machines with containers. Or “global”, which ensures that each machine gets exactly one instance of the specified container.&lt;/p&gt;
&lt;p&gt;A swarm is made up of multiple nodes, which can be either physical or virtual machines. The basic concept is simple enough: run docker swarm init to enable swarm mode and make our current machine a swarm manager, then run docker swarm join on other machines to have them join the swarm as workers.&lt;/p&gt;
&lt;h2 id=&#34;getting-started-with-docker-swarm&#34;&gt;Getting Started with Docker Swarm&lt;/h2&gt;
&lt;p&gt;To get started with Docker Swarm, you can use &amp;ldquo;Play with Docker&amp;rdquo;, aka PWD.
It&amp;rsquo;s free of cost and open for all.
You get maximum of 5 instances of Linux system to play around with Docker.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com&#34;&gt;Play with Docker labs&lt;/a&gt; on your browser&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on Icon near to Instance to choose 3 Managers &amp;amp; 2 Worker Nodes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/collabnix/dockerlabs/master/images/pwd_1.png&#34; alt=&#34;My image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wait for few seconds to bring up 5-Node Swarm Cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We recommend you start with one of our Beginners Guides, and then move to intermediate and expert level tutorials that cover most of the features of Docker. For a comprehensive approach to understanding Docker, I have categorized it as shown below:&lt;/p&gt;
&lt;h1 id=&#34;a-bonus-docker-swarm-visualizer&#34;&gt;A Bonus&amp;hellip; Docker Swarm Visualizer&lt;/h1&gt;
&lt;p&gt;Swarm Visualizer is a fancy tool which visualized the Swarm Cluster setup. It displays containers running on each node in the form of visuals. If you are conducting Docker workshop, it&amp;rsquo;s a perfect way to show your audience how the containers are placed under each node. Go..try it out..&lt;/p&gt;
&lt;h2 id=&#34;clone-the-repository&#34;&gt;Clone the Repository&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;git clone https://github.com/dockersamples/docker-swarm-visualizer&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; docker-swarm-visualizer&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;docker-compose up -d&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/collabnix/dockerlabs/master/images/visualizer.png&#34; alt=&#34;My image&#34;&gt;&lt;/p&gt;
&lt;p&gt;To run in a docker swarm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;$ docker service create &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;viz &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --publish&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;8080:8080/tcp &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --constraint&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;node.role&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;manager &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --mount&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;bind,src&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/var/run/docker.sock,dst&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/var/run/docker.sock &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  dockersamples/visualizer&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;lab01---create-overlay-network-under-docker-swarm&#34;&gt;Lab01 - Create Overlay Network under Docker Swarm&lt;/h1&gt;
&lt;p&gt;The overlay network is used to enable containers on different hosts to communicate. Under this lab exercise, we will see how to create Overlay network.&lt;/p&gt;
&lt;h2 id=&#34;pre-requisite&#34;&gt;Pre-requisite:&lt;/h2&gt;
&lt;h2 id=&#34;tested-infrastructure&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt; Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite-1&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Create 5 Node Instances by clicking on &amp;ldquo;hammer&amp;rdquo; sign on the left side of the UI interface&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following command will create a new overlay network called collabnet. All containers registered to this network can communicate with
each other, regardless of which node they are deployed onto.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker network create -d overlay collabnet
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;displaying-the-overlay-network&#34;&gt;Displaying the overlay network&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;docker network ls
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;inspecting-the-overlay-network&#34;&gt;Inspecting the overlay network&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;docker network inspect collabnet
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lab2---deploy-service&#34;&gt;Lab2 - Deploy Service&lt;/h1&gt;
&lt;p&gt;By default, Docker uses a spread replication model for deciding which containers should run on which hosts.
The spread approach ensures that containers are deployed across the cluster evenly. This means that if one of the nodes is removed from
the cluster,  the instances would be already running on the other nodes. There workload on the removed node would be rescheduled across
the remaining available nodes.&lt;/p&gt;
&lt;p&gt;A new concept of Services is used to run containers across the cluster. This is a higher-level concept than containers.
A service allows you to define how applications should be deployed at scale. By updating the service, Docker updates the container
required in a managed way.&lt;/p&gt;
&lt;h2 id=&#34;task&#34;&gt;Task&lt;/h2&gt;
&lt;p&gt;In this case, we are deploying the Docker Image ajeetraina/hellowhale. We are defining a friendly name of a service called
http and that it should be attached to the newly created collabnet network.&lt;/p&gt;
&lt;p&gt;For ensuring replication and availability, we are running two instances, of replicas, of the container across our cluster.&lt;/p&gt;
&lt;p&gt;Finally, we load balance these two containers together on port 80. Sending an HTTP request to any of the nodes in the cluster will process the request by one of the containers within the cluster.
The node which accepted the request might not be the node where the container responds. Instead, Docker load-balances requests across all available containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker service create --name http --network collabnet --replicas 2 -p 80:80 ajeetraina/hellowhale
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can view the services running on the cluster using the CLI command docker service ls&lt;/p&gt;
&lt;p&gt;As containers are started you will see them using the ps command. You should see one instance of the container on each host.&lt;/p&gt;
&lt;p&gt;List containers on the first host -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;List containers on the second host -&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we issue an HTTP request to the public port, it will be processed by the two containers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; curl your_machine_ip:80
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lab03---inspecting-state&#34;&gt;Lab03 - Inspecting State&lt;/h1&gt;
&lt;p&gt;The Service concept allows you to inspect the health and state of your cluster and the running applications.&lt;/p&gt;
&lt;h2 id=&#34;task-1&#34;&gt;Task&lt;/h2&gt;
&lt;p&gt;You can view the list of all the tasks associated with a service across the cluster.
In this case, each task is a container,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker service ps http
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can view the details and configuration of a service via&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker service inspect --pretty http
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On each node, you can ask what tasks it is currently running. Self refers to the manager node Leader:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker node ps self
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using the ID of a node you can query individual hosts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker node ps $(docker node ls -q | head -n1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the next step, we will scale the service to run more instances of the container.&lt;/p&gt;
&lt;h1 id=&#34;lab4---scale-service&#34;&gt;Lab4 - Scale Service&lt;/h1&gt;
&lt;p&gt;A Service allows us to scale how many instances of a task is running across the cluster.
As it understands how to launch containers and which containers are running, it can easily start, or remove, containers as required.
At the moment the scaling is manual. However, the API could be hooked up to an external system such as a metrics dashboard.&lt;/p&gt;
&lt;h1 id=&#34;task-2&#34;&gt;Task&lt;/h1&gt;
&lt;p&gt;At present, we have two load-balanced containers running, which are processing our requests curl docker&lt;/p&gt;
&lt;p&gt;The command below will scale our http service to be running across five containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker service scale http=5
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt; docker service scale http=5
http scaled to 5
overall progress: 5 out of 5 tasks
1/5: running   [==================================================&amp;gt;]
2/5: running   [==================================================&amp;gt;]
3/5: running   [==================================================&amp;gt;]
4/5: running   [==================================================&amp;gt;]
5/5: running   [==================================================&amp;gt;]
verify: Waiting 4 seconds to verify that tasks are stable...
verify: Service converged
[manager1] (local) root@192.168.0.4 ~
$
[manager1] (local) root@192.168.0.4 ~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On each host, you will see additional nodes being started docker ps&lt;/p&gt;
&lt;p&gt;The load balancer will automatically be updated. Requests will now be processed across the new containers.
Try issuing more commands via&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl your_machine_ip:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try scaling the service down to see the result.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker service scale http=2
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lab-5---deploy-the-application-components-as-docker-services&#34;&gt;Lab #5 - Deploy the application components as Docker services&lt;/h1&gt;
&lt;p&gt;Our sleep application is becoming very popular on the internet (due to hitting Reddit and HN).
People just love it. So, you are going to have to scale your application to meet peak demand.
You will have to do this across multiple hosts for high availability too.
We will use the concept of Services to scale our application easily and manage many containers as a single entity.&lt;/p&gt;
&lt;p&gt;Services were a new concept in Docker 1.12. They work with swarms and are intended for long-running containers.&lt;/p&gt;
&lt;p&gt;Let’s deploy sleep as a Service across our Docker Swarm.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --name sleep-app ubuntu sleep infinity
k70j90k9cp5n2bxsq72tjdmxs
overall progress: 1 out of 1 tasks
1/1: running
verify: Service converged
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Verify that the service create has been received by the Swarm manager.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE
     PORTS
k70j90k9cp5n        sleep-app           replicated          1/1                 ubuntu:latest

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The state of the service may change a couple times until it is running. The image is being downloaded from Docker Store to the other engines in the Swarm. Once the image is downloaded the container goes into a running state on one of the three nodes.&lt;/p&gt;
&lt;p&gt;At this point it may not seem that we have done anything very differently than just running a docker run. We have again deployed a single container on a single host. The difference here is that the container has been scheduled on a swarm cluster.&lt;/p&gt;
&lt;p&gt;Well done. You have deployed the sleep-app to your new Swarm using Docker services.&lt;/p&gt;
&lt;h1 id=&#34;scaling-the-application&#34;&gt;Scaling the Application&lt;/h1&gt;
&lt;p&gt;Demand is crazy! Everybody loves your sleep app! It’s time to scale out.&lt;/p&gt;
&lt;p&gt;One of the great things about services is that you can scale them up and down to meet demand. In this step you’ll scale the service up and then back down.&lt;/p&gt;
&lt;p&gt;You will perform the following procedure from node1.&lt;/p&gt;
&lt;p&gt;Scale the number of containers in the sleep-app service to 7 with the docker service update &amp;ndash;replicas 7 sleep-app command. Replicas is the term we use to describe identical containers providing the same service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service update --replicas 7 sleep-app
sleep-app
overall progress: 7 out of 7 tasks
1/7: running
2/7: running
3/7: running
4/7: running
5/7: running
6/7: running
7/7: running
verify: Service converged
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE     PORTS
k70j90k9cp5n        sleep-app           replicated          7/7                 ubuntu:latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Swarm manager schedules so that there are 7 sleep-app containers in the cluster. These will be scheduled evenly across the Swarm members.&lt;/p&gt;
&lt;p&gt;We are going to use the docker service ps sleep-app command. If you do this quick enough after using the &amp;ndash;replicas option you can see the containers come up in real time.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service ps sleep-app
ID                  NAME                IMAGE               NODE                DESIRED STATE     CURRENT STATE                ERROR               PORTS
bv6ofc6x6moq        sleep-app.1         ubuntu:latest       manager1            Running     Running 6 minutes ago
5gj1ql7sjt14        sleep-app.2         ubuntu:latest       manager2            Running     Running about a minute ago
p01z0tchepwa        sleep-app.3         ubuntu:latest       worker2             Running     Running about a minute ago
x3kwnjcwxnb0        sleep-app.4         ubuntu:latest       worker2             Running     Running about a minute ago
c98vxyeefmru        sleep-app.5         ubuntu:latest       manager1            Running     Running about a minute ago
kwmey288bkhp        sleep-app.6         ubuntu:latest       manager3            Running     Running about a minute ago
vu78hp6bhauq        sleep-app.7         ubuntu:latest       worker1             Running     Running about a minute ago
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that there are now 7 containers listed. It may take a few seconds for the new containers in the service to all show as RUNNING. The NODE column tells us on which node a container is running.&lt;/p&gt;
&lt;p&gt;Scale the service back down to just four containers with the docker service update &amp;ndash;replicas 4 sleep-app command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service update --replicas 4 sleep-app
sleep-app
overall progress: 4 out of 4 tasks
1/4: running
2/4: running
3/4: running
4/4: running
verify: Service converged
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[manager1] (local) root@192.168.0.9 ~/dockerlabs/intermediate/swarm
$ docker service ps sleep-app
ID                  NAME                IMAGE               NODE                DESIRED STATE     CURRENT STATE           ERROR               PORTS
bv6ofc6x6moq        sleep-app.1         ubuntu:latest       manager1            Running     Running 7 minutes ago
5gj1ql7sjt14        sleep-app.2         ubuntu:latest       manager2            Running     Running 2 minutes ago
p01z0tchepwa        sleep-app.3         ubuntu:latest       worker2             Running     Running 2 minutes ago
kwmey288bkhp        sleep-app.6         ubuntu:latest       manager3            Running     Running 2 minutes ago
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You have successfully scaled a swarm service up and down.&lt;/p&gt;
&lt;h1 id=&#34;lab6---drain-a-node-and-reschedule-the-containers&#34;&gt;Lab6 - Drain a node and reschedule the containers&lt;/h1&gt;
&lt;p&gt;Your sleep-app has been doing amazing after hitting Reddit and HN. It’s now number 1 on the App Store! You have scaled up during the holidays and down during the slow season. Now you are doing maintenance on one of your servers so you will need to gracefully take a server out of the swarm without interrupting service to your customers.&lt;/p&gt;
&lt;p&gt;Take a look at the status of your nodes again by running docker node ls on node1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
swfk8vsyfe4z2zbtianz5gh2p *   manager1            Ready               Active              Leader              18.09.3
sgyr3vxu1n99vyce9al67alwt     manager2            Ready               Active              Reachable           18.09.3
ud3ghz1zlrmn3fbv9j930ldja     manager3            Ready               Active              Reachable           18.09.3
v57fk367d1lw4e1ufis3jwa2h     worker1             Ready               Active               18.09.3
uinkvr56fq7zb711ycbifhf4f     worker2             Ready               Active               18.09.3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will be taking worker2 out of service for maintenance.&lt;/p&gt;
&lt;p&gt;Let’s see the containers that you have running on worker2.&lt;/p&gt;
&lt;p&gt;We are going to take the ID for worker2 and run docker node update &amp;ndash;availability drain worker2.
We are using the worker2 host ID as input into our drain command. Replace yournodeid with the id of worker2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker node update --availability drain worker2
worker2
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
swfk8vsyfe4z2zbtianz5gh2p *   manager1            Ready               Active              Leader              18.09.3
sgyr3vxu1n99vyce9al67alwt     manager2            Ready               Active              Reachable           18.09.3
ud3ghz1zlrmn3fbv9j930ldja     manager3            Ready               Active              Reachable           18.09.3
v57fk367d1lw4e1ufis3jwa2h     worker1             Ready               Active               18.09.3
uinkvr56fq7zb711ycbifhf4f     worker2             Ready               Drain
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Node worker2 is now in the Drain state.&lt;/p&gt;
&lt;p&gt;Switch back to node2 and see what is running there by running docker ps.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS     PORTS               NAMES
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;worker2 does not have any containers running on it.&lt;/p&gt;
&lt;p&gt;Lastly, check the service again on node1 to make sure that the container were rescheduled.
You should see all four containers running on the remaining two nodes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service ps sleep-app
ID                  NAME                IMAGE               NODE                DESIRED STATE     CURRENT STATE            ERROR               PORTS
bv6ofc6x6moq        sleep-app.1         ubuntu:latest       manager1            Running     Running 18 minutes ago
5gj1ql7sjt14        sleep-app.2         ubuntu:latest       manager2            Running     Running 12 minutes ago
5aqy7jv9ojmn        sleep-app.3         ubuntu:latest       worker1             Running     Running 3 minutes ago
p01z0tchepwa         \_ sleep-app.3     ubuntu:latest       worker2             Shutdown     Shutdown 3 minutes ago
kwmey288bkhp        sleep-app.6         ubuntu:latest       manager3            Running     Running 12 minutes ago
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[manager1] (local) root@192.168.0.9 ~/dockerlabs/intermediate/swarm
$ docker node inspect --pretty worker2
ID:                     uinkvr56fq7zb711ycbifhf4f
Hostname:               worker2
Joined at:              2019-03-08 15:12:03.102015148 +0000 utc
Status:
 State:                 Ready
 Availability:          Drain
 Address:               192.168.0.10
Platform:
 Operating System:      linux
 Architecture:          x86_64
Resources:
 CPUs:                  8
 Memory:                31.4GiB
Plugins:
 Log:           awslogs, fluentd, gcplogs, gelf, journald, json-file, local, logentries, splunk
, syslog
 Network:               bridge, host, ipvlan, macvlan, null, overlay
 Volume:                local
Engine Version:         18.09.3
TLS Info:
 TrustRoot:
-----BEGIN CERTIFICATE-----
MIIBajCCARCgAwIBAgIUcfR/4dysEv9qsbuPTFuIn00WbmowCgYIKoZIzj0EAwIw
EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTkwMzA4MTUwNzAwWhcNMzkwMzAzMTUw
NzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
A0IABPo7tm+Vxk+CIw9AJEGTlyW/JPotQuVqrbvi34fuK6Ak4cWYU6T1WSiJMHI0
nEGS/1zFIWQzJY0WQbT8eMaqX4ijQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
Af8EBTADAQH/MB0GA1UdDgQWBBQ6OEYmo8HUfpFnSxJDHWkjf/wWmTAKBggqhkjO
PQQDAgNIADBFAiBy39e7JLpHBH0bONWU8rQZPmY2dtkfHjPOUQNLFBdlkAIhAIpD
Lb6ZrhbEJDcIhlnozKRcPSJi7RWy4/16THIUJdpM
-----END CERTIFICATE-----

 Issuer Subject:        MBMxETAPBgNVBAMTCHN3YXJtLWNh
 Issuer Public Key:     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+ju2b5XGT4IjD0AkQZOXJb8k+i1C5Wqtu+Lfh+4roCThxZhTpPVZKIkwcjScQZL/XMUhZDMljRZBtPx4xqpfiA==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run docker node update &amp;ndash;availability active &lt;NODE-ID&gt; to return the drained node to an active state:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker node update --availability active worker2
worker2
[manager1] (local) root@192.168.0.9 ~/dockerlabs/intermediate/swarm
$ docker node inspect --pretty worker2
ID:                     uinkvr56fq7zb711ycbifhf4f
Hostname:               worker2
Joined at:              2019-03-08 15:12:03.102015148 +0000 utc
Status:
State:                 Ready
Availability:          Active
Address:               192.168.0.10
Platform:
Operating System:      linux
Architecture:          x86_64
Resources:
CPUs:                  8
Memory:                31.4GiB
Plugins:
Log:           awslogs, fluentd, gcplogs, gelf, journald, json-file, local, logentries, splunk, syslog
Network:               bridge, host, ipvlan, macvlan, null, overlay
Volume:                local
Engine Version:         18.09.3
TLS Info:
TrustRoot:
-----BEGIN CERTIFICATE-----
MIIBajCCARCgAwIBAgIUcfR/4dysEv9qsbuPTFuIn00WbmowCgYIKoZIzj0EAwIw
EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTkwMzA4MTUwNzAwWhcNMzkwMzAzMTUw
NzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
A0IABPo7tm+Vxk+CIw9AJEGTlyW/JPotQuVqrbvi34fuK6Ak4cWYU6T1WSiJMHI0
nEGS/1zFIWQzJY0WQbT8eMaqX4ijQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
Af8EBTADAQH/MB0GA1UdDgQWBBQ6OEYmo8HUfpFnSxJDHWkjf/wWmTAKBggqhkjO
PQQDAgNIADBFAiBy39e7JLpHBH0bONWU8rQZPmY2dtkfHjPOUQNLFBdlkAIhAIpD
Lb6ZrhbEJDcIhlnozKRcPSJi7RWy4/16THIUJdpM
-----END CERTIFICATE-----

Issuer Subject:        MBMxETAPBgNVBAMTCHN3YXJtLWNh
Issuer Public Key:     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+ju2b5XGT4IjD0AkQZOXJb8k+i1C5Wqtu+Lfh+4roCThxZhTpPVZKIkwcjScQZL/XMUhZDMljRZBtPx4xqpfiA==
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lab7---cleaning-up&#34;&gt;Lab7 - Cleaning Up&lt;/h1&gt;
&lt;p&gt;Execute the docker service rm sleep-app command on manager1 to remove the service called sleep-app.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service rm sleep-app
sleep-app
[manager1] (local) root@192.168.0.9 ~/dockerlabs/intermediate/swarm
$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE     PORTS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Execute the docker ps command on node1 to get a list of running containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
044bea1c2277        ubuntu              &amp;quot;sleep infinity&amp;quot;    17 minutes ago      17 minutes ag                           distracted_mayer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use the docker kill &lt;CONTAINER ID&gt; command on node1 to kill the sleep container we started at the beginning.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker kill yourcontainerid
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, let’s remove node1, node2, and node3 from the Swarm. We can use the docker swarm leave &amp;ndash;force command to do that.&lt;/p&gt;
&lt;p&gt;Lets run docker swarm leave &amp;ndash;force on all the nodes to leave swarm cluster.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker swarm leave --force
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Congratulations! You’ve completed this lab. You now know how to build a swarm, deploy applications as collections of services, and scale individual services up and down.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Introduction to Docker Networking</title>
      <link>/docs/communityleaders/eventhandbooks/docker201/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/communityleaders/eventhandbooks/docker201/networking/</guid>
      <description>
        
        
        &lt;h1 id=&#34;docker-networking&#34;&gt;Docker Networking&lt;/h1&gt;
&lt;p&gt;For Docker containers to communicate with each other and the outside world via the host machine, there has to be a layer of networking involved. Docker supports different types of networks, each fit for certain use cases.&lt;/p&gt;
&lt;h2 id=&#34;what-are-different-types-of-networking-in-docker&#34;&gt;What are different types of Networking in Docker&lt;/h2&gt;
&lt;p&gt;Docker comes with network drivers geared towards different use cases. Docker’s networking subsystem is pluggable, using drivers.&lt;/p&gt;
&lt;h3 id=&#34;what-is-docker0-in-terms-of-docker-networking&#34;&gt;What is &lt;code&gt;docker0&lt;/code&gt; in terms of Docker Networking&lt;/h3&gt;
&lt;p&gt;When Docker is installed, a default &lt;strong&gt;bridge&lt;/strong&gt; network named &lt;strong&gt;docker0&lt;/strong&gt; is created. Each new Docker container is automatically attached to this network, unless a custom network is specified.&lt;/p&gt;
&lt;p&gt;Besides &lt;strong&gt;docker0&lt;/strong&gt;, two other networks get created automatically by Docker: &lt;strong&gt;host&lt;/strong&gt;(no isolation between host and containers on this network, to the outside world they are on the same network) and &lt;strong&gt;none&lt;/strong&gt;(attached containers run on container-specific network stack)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&#34;host-networks&#34;&gt;Host networks&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using host network driver for a container, that container’s network stack is not isolated from the Docker host, and use the host’s networking directly.
Host is only available for swarm services on &lt;strong&gt;&lt;em&gt;Docker 17.06 and higher&lt;/em&gt;&lt;/strong&gt;.
The host networking driver only works on Linux hosts, and is not supported on Docker for Mac, Docker for Windows, or Docker EE for Windows Server.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;h3 id=&#34;bridge-networks&#34;&gt;Bridge networks&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The default network driver. If you don’t specify a driver, this is the type of network you are creating. Bridge networks are usually used when your applications run in standalone containers that need to communicate. A bridge network uses a software bridge which allows containers connected to the same bridge network to communicate, while providing isolation from containers which are not connected to that bridge network.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;h3 id=&#34;macvlan-networks&#34;&gt;Macvlan networks&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Legacy applications expect to be directly connected to the physical network, rather than routed through the Docker host’s network stack. Macvlan networks assign a MAC address to a container, making it appear as a physical device on your network. The Docker daemon routes traffic to containers by their MAC addresses. We need to designate a physical interface on our Docker host to use for the Macvlan, as well as the subnet and gateway of the Macvlan.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;h3 id=&#34;none-networks&#34;&gt;None networks&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This mode will not configure any IP to the container and doesn’t have any access to the external network as well as to other containers. It does have the loopback address and can be used for running batch jobs.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;h3 id=&#34;overlay-networks&#34;&gt;Overlay networks&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You have multiple docker host running containers in which each docker host has its own internal private bridge network allowing the containers to communicate with each other however, containers across the host has no way to communicate with each other unless you publish the port on those containers and set up some kind of routing yourself. This is where &lt;code&gt;Overlay network&lt;/code&gt; comes into play. With docker swarm you can create an overlay network which will create an internal private network that spans across all the nodes participating in the swarm network as we could attach a container or service to this network using the network option while creating a service. So, the containers across the nodes can communicate over this overlay network.&lt;/p&gt;
&lt;h2 id=&#34;few-basic-commands&#34;&gt;Few Basic commands&lt;/h2&gt;
&lt;h3 id=&#34;1-how-to-assign-static-ip-address-to-a-container&#34;&gt;1. How to assign Static IP address to a Container&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a new bridge network with your subnet and gateway for your ip block&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;$ docker network create --subnet 198.0.125.0/24 --gateway 198.0.125.254 mystaticip&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Run a nginx container with a specific ip in that block&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;$ docker run --rm -it --net mystaticip --ip 198.0.125.2 nginx&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Curl the ip&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;$ curl 198.0.125.2&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-how-to-expose-container-port-on-host&#34;&gt;2. How to Expose Container Port on Host&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;$ docker run -d -p 80:80 nginx&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;If you have multiple interface, then you will need to provide specific IP. Example:-&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;$ docker run -p 127.0.0.1:&lt;span style=&#34;color:#000&#34;&gt;$HOSTPORT&lt;/span&gt;:&lt;span style=&#34;color:#000&#34;&gt;$CONTAINERPORT&lt;/span&gt; --name CONTAINER -t image_name&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-networking-containers-on-multiple-hosts-with-docker-network-work&#34;&gt;3. Networking Containers on Multiple Hosts with Docker Network work&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;base&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;https://github.com/docker/machine/releases/download/v0.14.0 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;curl -L &lt;span style=&#34;color:#000&#34;&gt;$base&lt;/span&gt;/docker-machine-&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;uname -s&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;uname -m&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; &amp;gt;/tmp/docker-machine &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;sudo install /tmp/docker-machine /usr/local/bin/docker-machine&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;lab-1-docker-overlay-networking&#34;&gt;Lab #1: Docker Overlay Networking&lt;/h1&gt;
&lt;p&gt;The overlay network driver creates a distributed network among multiple Docker daemon hosts. It allows you to create a secure, layer-2 network, spanning into multiple docker hosts. When you setup a Docker swarm/ Docker in swarm mode, docker automatically create an overlay network called &lt;b&gt;ingress&lt;/b&gt;.&lt;/p&gt;
&lt;h3 id=&#34;firewall-rules-for-docker-daemons-using-overlay-networks&#34;&gt;Firewall rules for Docker daemons using overlay networks&lt;/h3&gt;
&lt;p&gt;You need the following ports open to traffic to and from each Docker host participating on an overlay network:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TCP port 2377 for cluster management communications
TCP and UDP port 7946 for communication among nodes
UDP port 4789 for overlay network traffic
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;pre-requisite&#34;&gt;Pre-requisite:&lt;/h2&gt;
&lt;h2 id=&#34;tested-infrastructure&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt; Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite-1&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Add New Instance&lt;/strong&gt; on the left side of the screen to bring up Alpine OS instance on the right side&lt;/li&gt;
&lt;li&gt;Create a swarm cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;check-docker-network-in-host-mode&#34;&gt;Check docker network in host mode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
e2ff8b7516b8        bridge              bridge              local
2bbb99678f58        host                host                local
04212f972673        none                null                local
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;setting-up-a-swarm&#34;&gt;Setting up a swarm&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker swarm init --advertise-addr=&amp;lt;Manager_Private_IP&amp;gt; --listen-addr=&amp;lt;Manager_Private_IP&amp;gt;:2377
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once swarm is ready lets check network&lt;/p&gt;
&lt;h3 id=&#34;network-in-swarm-mode&#34;&gt;Network in swarm mode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
e2ff8b7516b8        bridge              bridge              local
6a424c3904d1        docker_gwbridge     bridge              local
2bbb99678f58        host                host                local
s0ty6ay3lgdx        ingress             overlay             swarm
04212f972673        none                null                local
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will see the default overlay network &lt;b&gt;ingress&lt;/b&gt; has been created on both hosts (Worker and Manager). But when you create a custom overlay network, Only on manager node the network will get created on host node once the task is assigned then on the custom network will get created.&lt;/p&gt;
&lt;h1 id=&#34;lab-2-create-an-overlay-network&#34;&gt;Lab #2: Create an Overlay network&lt;/h1&gt;
&lt;p&gt;In this lab we are going to create a user defined &lt;b&gt;Overlay network&lt;/b&gt;.&lt;/p&gt;
&lt;h2 id=&#34;pre-requisite-2&#34;&gt;Pre-requisite:&lt;/h2&gt;
&lt;h2 id=&#34;tested-infrastructure-1&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt; Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite-3&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Add New Instance&lt;/strong&gt; on the left side of the screen to bring up Alpine OS instance on the right side&lt;/li&gt;
&lt;li&gt;Create a swarm cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;create-an-overlay-network-called-myoverlay0&#34;&gt;Create an overlay network called myoverlay0&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker network create --driver=overlay --subnet=192.168.1.0/24 --gateway=192.168.1.100 myoverlay0
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;listout-the-networks-in-the-host&#34;&gt;Listout the networks in the host&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
7bbea9e2f1c4        bridge              bridge              local
99e0866a81c5        docker_gwbridge     bridge              local
180292624b34        host                host                local
pp47xrb8x4da        ingress             overlay             swarm
1o0u8kqharpe        myoverlay0          overlay             swarm
e7e3f13ebea6        none                null                local
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;view-the-details-of-network-myoverlay0&#34;&gt;View the details of network myoverlay0&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker network inspect myoverlay0
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;create-an-encrypted-overlay-network&#34;&gt;Create an encrypted overlay network&lt;/h4&gt;
&lt;p&gt;By default application data is not encrypted, to encrypt application data as well, we need to add &lt;b&gt;&amp;ndash;opt encrypted&lt;/b&gt; while creating Overlaynetwork.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker network create -d overlay --opt encrypted encrypted_overlay
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lab-3-create-a-service&#34;&gt;Lab #3: Create a service&lt;/h1&gt;
&lt;p&gt;In this lab we will be looking to different option to connect service with user defined Overlay network.&lt;/p&gt;
&lt;h2 id=&#34;pre-requisite-4&#34;&gt;Pre-requisite:&lt;/h2&gt;
&lt;h2 id=&#34;tested-infrastructure-2&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt; Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite-5&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Add New Instance&lt;/strong&gt; on the left side of the screen to bring up Alpine OS instance on the right side&lt;/li&gt;
&lt;li&gt;Swarm cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;create-service-on-overlay-network-myoverlay0&#34;&gt;Create service on overlay network myoverlay0&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --name testWeb -p 80:80 --network=myoverlay0 --replicas 3 httpd
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;checking-network-id-for-the-service&#34;&gt;Checking Network ID for the service&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service inspect --format={{.Endpoint.VirtualIPs}} testWeb
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;connect-an-existing-service-to-an-overlay-network&#34;&gt;Connect an existing service to an overlay network&lt;/h3&gt;
&lt;h4 id=&#34;createing-a-new-service-with-name-testapp&#34;&gt;Createing A new service with name testApp&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --name testApp -p 8081:80 --replicas 3 nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;checking-the-current-network-for-the-service&#34;&gt;Checking the current network for the service&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service inspect --format={{.Endpoint.VirtualIPs}} testApp
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;connecting-service-to-userdefined-network-myoverlay0&#34;&gt;Connecting service to userdefined network myoverlay0&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service update --network-add myoverlay0 testApp
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;checking-the-current-network-endpoint-for-the-service&#34;&gt;Checking the current network Endpoint for the service&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service inspect --format={{.Endpoint.VirtualIPs}} testApp
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;removing-user-defined-network-myoverlay0-for-service-testapp&#34;&gt;Removing user defined network myoverlay0 for service testApp&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service update --network-rm myoverlay0 testApp
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lab-5-test-service-discovery&#34;&gt;Lab #5: Test Service Discovery&lt;/h1&gt;
&lt;p&gt;Service Discovery which allows containers on the &lt;b&gt;same network&lt;/b&gt; can access each other by name. Service Discovery is achive through Docker’s embedded DNS server(DNS IP 127.0.0.11). Embedded DNS server which provides built-in service discovery for any container created with a &lt;b&gt;valid name&lt;/b&gt;(&amp;ndash;name) or net-alias(&amp;ndash;network-alias) or aliased by link. Service discovery which wont work on default networks.&lt;/p&gt;
&lt;h2 id=&#34;pre-requisite-6&#34;&gt;Pre-requisite:&lt;/h2&gt;
&lt;h2 id=&#34;tested-infrastructure-3&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;10 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite-7&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Click on **Add&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testing-service-discovery-in-default-network&#34;&gt;Testing service discovery in default network&lt;/h3&gt;
&lt;h4 id=&#34;running-an-nginx-server&#34;&gt;Running an nginx server&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker container run -d --rm --name default_ntwrk nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;testing-wehther-able-to-resolve-using-service-name&#34;&gt;Testing wehther able to resolve using service name&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm byrnedo/alpine-curl default_ntwrk
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0curl: (6) Could not resolve host: default_ntwrk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are getting error that &lt;b&gt;Could not resolve host: default_ntwrk&lt;/b&gt;&lt;/p&gt;
&lt;h4 id=&#34;creating-a-bridge-network&#34;&gt;Creating a bridge network&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker network create --driver=bridge --subnet=192.168.1.0/24 --gateway=192.168.1.250 my_bridge
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;running-an-nginx-server-in-user-defined-network&#34;&gt;Running an nginx server in user defined network&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker container run -d --rm --name usr_ntwrk --network my_bridge nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testing-service-discovery-in-user-defined-network&#34;&gt;Testing service discovery in User defined network&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm --network my_bridge byrnedo/alpine-curl usr_ntwrk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will be getting nginx homepage on success.&lt;/p&gt;
&lt;h3 id=&#34;testing-service-discovery-in-swarm-mode&#34;&gt;Testing service discovery in Swarm Mode&lt;/h3&gt;
&lt;h4 id=&#34;creating-an-nginx-service-on-default-overlayingress&#34;&gt;Creating an nginx service on default overlay(ingress)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --name myWeb --replicas 2 --publish 8080:80 nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;creating-another-service-mycentos&#34;&gt;Creating another Service myCentos&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --replicas 2 --name myCentos centos sleep 1d
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;getting-container-id-of-centos&#34;&gt;Getting container ID of Centos&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker container ls
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;testing-wehther-able-to-resolve-using-service-name-from-centos&#34;&gt;Testing wehther able to resolve using service name from centos&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker exec -it &amp;lt;Container_ID&amp;gt; curl myWeb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will be getting error &lt;b&gt;curl: (6) Could not resolve host: myWeb; Unknown error&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Lets remove the Services&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service rm myWeb myCentos
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;create-a-overlay-network&#34;&gt;Create a Overlay network&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker network create -d overlay --opt encrypted CustomOverlay
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;create-nginx-service-with-customoverlay-network&#34;&gt;Create nginx service with CustomOverlay network&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --name myWeb --replicas 2 --publish 8080:80 --network=CustomOverlay  nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;creating-another-service-mycentos-with-customoverlay-network&#34;&gt;Creating another Service myCentos with CustomOverlay network&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;docker service create --replicas 2 --name myCentos --network=CustomOverlay centos sleep 1d
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;getting-container-id-of-centos-1&#34;&gt;Getting container ID of Centos&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker container ls
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;testing-wehther-able-to-resolve-using-service-name-from-centos-1&#34;&gt;Testing wehther able to resolve using service name from centos&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ docker exec -it &amp;lt;Container_ID&amp;gt; curl myWeb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you will get response of nginx home page&lt;/p&gt;
&lt;h1 id=&#34;lab-6-test-routing-mesh&#34;&gt;Lab #6: Test Routing Mesh&lt;/h1&gt;
&lt;p&gt;Docker swarm by default use ingress mode layer 4 routing mesh. The routing mesh enables each node in the swarm to accept connections on published ports for any service running in the swarm, even if there’s no task running on the node. You can bypass the routing mesh, using &lt;b&gt;host mode&lt;/b&gt; when you create the service. Then you will able to access the service only from the node where task is running.&lt;/p&gt;
&lt;h2 id=&#34;pre-requisite-8&#34;&gt;Pre-requisite:&lt;/h2&gt;
&lt;h2 id=&#34;tested-infrastructure-4&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite-9&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Click on **Add&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-a-service-in-ingress-mode&#34;&gt;Create a service in ingress mode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --name myWebApp --publish published=80,target=80,mode=ingress nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checking Current PublishMode&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service inspect --format &amp;quot;{{json .Endpoint.Ports}}&amp;quot; myWebApp

[{&amp;quot;Protocol&amp;quot;:&amp;quot;tcp&amp;quot;,&amp;quot;TargetPort&amp;quot;:80,&amp;quot;PublishedPort&amp;quot;:80,&amp;quot;PublishMode&amp;quot;:&amp;quot;ingress&amp;quot;}]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;bypass-the-routing-mesh-by-host-mode&#34;&gt;Bypass the routing mesh by host Mode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker service create --name bypassRM --publish published=8080,target=80,mode=host nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checking Current PublishMode&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker service inspect --format &amp;quot;{{json .Endpoint.Ports}}&amp;quot; bypassRM

[{&amp;quot;Protocol&amp;quot;:&amp;quot;tcp&amp;quot;,&amp;quot;TargetPort&amp;quot;:80,&amp;quot;PublishedPort&amp;quot;:8080,&amp;quot;PublishMode&amp;quot;:&amp;quot;host&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lab-7-test-standalone-containers-in-overlay-network&#34;&gt;Lab #7: Test standalone containers in Overlay Network&lt;/h1&gt;
&lt;p&gt;The overlay network driver creates a distributed network among multiple Docker daemon hosts and which are used commonly in docker swarm.
In this lab we are going to attach containers in Overlay network make them to communicate with container in another host.&lt;/p&gt;
&lt;h2 id=&#34;pre-requisite-10&#34;&gt;Pre-requisite:&lt;/h2&gt;
&lt;h2 id=&#34;tested-infrastructure-5&#34;&gt;Tested Infrastructure&lt;/h2&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Platform&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Number of Instance&lt;/b&gt;&lt;/th&gt;
    &lt;th class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;Reading Time&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt; Play with Docker&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-yw4l&#34;&gt;&lt;b&gt;5 min&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pre-requisite-11&#34;&gt;Pre-requisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an account with &lt;a href=&#34;https://hub.docker.com&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;PWD&lt;/a&gt; Platform on your browser&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Add New Instance&lt;/strong&gt; on the left side of the screen to bring up Alpine OS instance on the right side&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bring-up-a-swarm-mode-cluster&#34;&gt;Bring up a swarm mode cluster&lt;/h2&gt;
&lt;h3 id=&#34;try-to-attach-a-container-on-default-docker-overlayingress-network&#34;&gt;Try to attach a container on default docker overlay(ingress) network&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker container run --network=ingress -d nginx:alpine
docker: Error response from daemon: Could not attach to network ingress: rpc error: code = PermissionDenied desc = network ingress not manually attachable.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We failed to attach, since by default attachable flag is disabled.&lt;br&gt;
To create an overlay network which can be used by swarm services or standalone containers to communicate with other standalone containers running on other Docker daemons, we should add the &lt;b&gt;&amp;ndash;attachable&lt;/b&gt; flag while creating an overlay network.&lt;/p&gt;
&lt;h3 id=&#34;create-an-attachable-overlay-network&#34;&gt;Create an attachable overlay network&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker network create --driver overlay --attachable myOverlay
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;launch-a-container-on-manager-node-with-network-myoverlay&#34;&gt;Launch a container on Manager node with network myOverlay&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker container run --network=myOverlay --name=manager-host -d nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;launch-a-container-on-worker-node-with-network-myoverlay&#34;&gt;Launch a container on Worker node with network myOverlay&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker container run --network=myOverlay --name=worker-host -d httpd:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;testing-able-to-communicate-from-worker-node&#34;&gt;Testing able to communicate (From worker Node)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ docker exec -it worker-host sh -c &amp;quot;wget manager-host; cat index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will be getting nginx default home page, which the container running on master node.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
